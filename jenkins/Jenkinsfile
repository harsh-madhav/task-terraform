pipeline {
    agent {
        docker {
            image 'docker:24.0.7-dind'
            args '--privileged --network=host -v /var/run/docker.sock:/var/run/docker.sock'
            reuseNode true
        }
    }

    environment {
        REGISTRY = "registry.digitalocean.com/task-registry"   
        IMAGE_NAME = "flask-app"
        DOCKERFILE_PATH = "flask-project/Dockerfile"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev', 
                     url: 'https://github.com/harsh-madhav/task-terraform.git', 
                     credentialsId: 'git-credentials'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Change to the directory containing the Dockerfile
                    // Build Docker image
                    // Install Docker client
                    sh 'apk add --no-cache docker-cli'
                    
                    // Log in to the registry
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-credentials',
                        usernameVariable: 'REGISTRY_USER',
                        passwordVariable: 'REGISTRY_PASS'
                    )]) {
                        sh "echo \"${REGISTRY_PASS}\" | docker login ${REGISTRY} -u \"${REGISTRY_USER}\" --password-stdin"
                    }
                    
                    // Build and push the Docker image
                    sh "docker build -t ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} -f ${DOCKERFILE_PATH} ."
                    sh "docker tag ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} ${REGISTRY}/${IMAGE_NAME}:latest"
                    sh "docker push ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
                    sh "docker push ${REGISTRY}/${IMAGE_NAME}:latest"
                    
                    // Verify the image was pushed
                    sh "docker images"
                }
            }
            post {
                failure {
                    echo "Docker build failed"
                    // Add cleanup steps if needed
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("https://${REGISTRY}", "docker-credentials") {
                        dockerImage.push()
                        dockerImage.push("latest")
                    }
                }
            }
            post {
                always {
                    // Clean up built images to save disk space
                    sh 'docker system prune -f'
                }
            }
        }
    }
}